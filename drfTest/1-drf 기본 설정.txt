장고에서, Django REST Framework(DRF)

1.
Django REST Framework 설치,
pip install djangorestframework

2.
INSTALLED_APPS 설정

Django의 settings.py 파일을 열고, INSTALLED_APPS에 rest_framework를 추가합니다.

INSTALLED_APPS = [
    ...
    "rest_framework",  # ✅ Django REST Framework 추가
]

3.
Post 모델을 예를 들어, 레스트 작업, crud,

- 새 app 생성, settings 에 등록
python manage.py startapp blog

프로젝트명/settings.py

INSTALLED_APPS = [
    'blog',
    ...
    ]

모델 (Model)

models.py에 간단한 Post 모델을 정의합니다.

from django.db import models

class Post(models.Model):
    title = models.CharField("포스트 제목", max_length=100)
    content = models.TextField("포스트 내용")
    created_at = models.DateTimeField(auto_now_add=True)  # 생성 날짜 자동 저장

    def __str__(self):
        return self.title

📌 마이그레이션 실행

 python manage.py makemigrations
 python manage.py migrate

4
관리자 연결.
Postadmin 구성.
blog/admin.py  에서.
from django.contrib import admin
from blog.models import Post

# Register your models here.
@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    pass

5
관리자 계정 생성.
python manage.py createsuperuser

6
시리얼라이저 (Serializer)
Django의 모델 데이터를 JSON으로 변환해주는 serializers.py를 생성합니다.

📌 serializers.py

from rest_framework import serializers
from .models import Post

class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Post
        fields = ["id", "title", "content", "created_at"]  # JSON으로 변환할 필드 지정

7
views 작업, crud 작업을 자동으로 해주는 도구 이용.

RESTful API 엔드포인트 (CRUD 기능 자동 지원)
# ModelViewSet을 사용하면 CRUD(Create, Read, Update, Delete)
# API를 자동으로 생성해 줌.
# 부모 클래스 : viewsets.ModelViewSet, 상속,

class PostViewSet(viewsets.ModelViewSet):
    queryset = Post.objects.all()
    serializer_class = PostSerializer

8
라우팅 작업, urls
urls.py

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import PostViewSet

# ✅ 자동 URL 라우팅 (ModelViewSet 사용 시)
# DefaultRouter()를 사용하면 자동으로 posts/ 경로에 API를 매핑.
# router.register(r'posts', PostViewSet) → posts/ 경로에서 CRUD API 제공.

router = DefaultRouter()
router.register(r"posts", PostViewSet)

urlpatterns = [
 path("api/", include(router.urls)),  # API 엔드포인트 등록

9
API 엔드포인트 확인

GET /api/posts/ → 모든 게시글 조회
POST /api/posts/ → 새로운 게시글 생성
GET /api/posts/{id}/ → 특정 게시글 조회
PUT /api/posts/{id}/ → 특정 게시글 수정
DELETE /api/posts/{id}/ → 특정 게시글 삭제

10
스웨거를 설치해서, 자동으로 레스트 등록

drf-yasg 설치
먼저, drf-yasg 라이브러리를 설치합니다.
(Yet Another Swagger Generator)

pip install drf-yasg

11
INSTALLED_APPS = [
...
"drf_yasg",  # ✅ drf-yasg (Swagger) 추가
]

12
라우팅 작업.
urls.py

from django.urls import path, re_path
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

# ✅ Swagger 설정
schema_view = get_schema_view(
    openapi.Info(
        title="Django API 문서",
        default_version="v1",
        description="Django REST Framework를 사용한 API 문서",
        terms_of_service="https://www.google.com/policies/terms/",
        contact=openapi.Contact(email="admin@example.com"),
        license=openapi.License(name="MIT License"),
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),  # 모든 사용자 접근 가능
)

urlpatterns = [
    # ✅ Swagger UI (웹 브라우저용)
    path("swagger/", schema_view.with_ui("swagger", cache_timeout=0), name="schema-swagger-ui"),

    # ✅ ReDoc (대체 UI)
    path("redoc/", schema_view.with_ui("redoc", cache_timeout=0), name="schema-redoc"),

    # ✅ API 명세 (JSON / YAML)
    re_path(r"^swagger(?P<format>\.json|\.yaml)$", schema_view.without_ui(cache_timeout=0), name="schema-json"),
]

13
확인
http://localhost:8000/swagger
